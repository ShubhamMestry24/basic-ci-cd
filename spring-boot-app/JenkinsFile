pipeline {
    agent {
        docker {
            image 'abhishekf5/maven-abhishek-docker-agent:v1'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
        }
    }

    stages {
        stage('Checkout') {
            steps {
                sh 'echo passed'
                git branch: 'master', url: 'https://github.com/ShubhamMestry24/basic-ci-cd.git'
            }
        }

        stage('Build and Test') {
            steps {
                // build the project and create a JAR file
                sh 'cd spring-boot-app && mvn clean package'
            }  
        } 

        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://localhost:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }
        }

        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "iamshubham24/ultimate-cicd:${BUILD_NUMBER}"
                // DOCKERFILE_LOCATION = "spring-boot-app/Dockerfile"
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                script {
                    sh 'cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                }
            }
        }   

        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "basic-ci-cd"
                GIT_USER_NAME = "checkout scm"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        git config user.email "iamshubhammestry24@gmail.com"
                        git config user.name "${GIT_USER_NAME}"
                        git clone "https://github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git"
                        cd "${GIT_REPO_NAME}"
                        # Update the deployment file with the new Docker image tag
                        sed -i "s|image: .*|image: ${DOCKER_IMAGE}|" k8s/deployment.yaml
                        git add k8s/deployment.yaml
                        git commit -m "Update Docker image to ${DOCKER_IMAGE}"
                        git push origin master
                    '''
                }
            }
        }
    }
}
    
